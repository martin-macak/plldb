AWSTemplateFormatVersion: '2010-09-09'
Description: 'PLLDB Infrastructure Stack'

Resources:
  PLLDBServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PLLDBServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  PLLDBWebSocketConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: plldb-websocket-connect
      Handler: websocket_connect.lambda_handler
      Runtime: python3.13
      Code:
        S3Bucket: !Sub '${S3Bucket}'
        S3Key: !Sub '${S3KeyPrefix}/lambda_functions/websocket_connect.zip'
      Role: !GetAtt PLLDBServiceRole.Arn
      Timeout: 30

  PLLDBWebSocketDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: plldb-websocket-disconnect
      Handler: websocket_disconnect.lambda_handler
      Runtime: python3.13
      Code:
        S3Bucket: !Sub '${S3Bucket}'
        S3Key: !Sub '${S3KeyPrefix}/lambda_functions/websocket_disconnect.zip'
      Role: !GetAtt PLLDBServiceRole.Arn
      Timeout: 30

  PLLDBWebSocketAuthorizeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: plldb-websocket-authorize
      Handler: websocket_authorize.lambda_handler
      Runtime: python3.13
      Code:
        S3Bucket: !Sub '${S3Bucket}'
        S3Key: !Sub '${S3KeyPrefix}/lambda_functions/websocket_authorize.zip'
      Role: !GetAtt PLLDBServiceRole.Arn
      Timeout: 30

  PLLDBWebSocketDefaultFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: plldb-websocket-default
      Handler: websocket_default.lambda_handler
      Runtime: python3.13
      Code:
        S3Bucket: !Sub '${S3Bucket}'
        S3Key: !Sub '${S3KeyPrefix}/lambda_functions/websocket_default.zip'
      Role: !GetAtt PLLDBServiceRole.Arn
      Timeout: 30

  PLLDBWebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: PLLDBAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  PLLDBWebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PLLDBWebSocketConnectFunction.Arn}/invocations'

  PLLDBWebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PLLDBWebSocketDisconnectFunction.Arn}/invocations'

  PLLDBWebSocketAuthorizeIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PLLDBWebSocketAuthorizeFunction.Arn}/invocations'

  PLLDBWebSocketDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PLLDBWebSocketDefaultFunction.Arn}/invocations'

  PLLDBWebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${PLLDBWebSocketConnectIntegration}'

  PLLDBWebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${PLLDBWebSocketDisconnectIntegration}'

  PLLDBWebSocketAuthorizeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      RouteKey: authorize
      AuthorizationType: NONE
      Target: !Sub 'integrations/${PLLDBWebSocketAuthorizeIntegration}'

  PLLDBWebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub 'integrations/${PLLDBWebSocketDefaultIntegration}'

  PLLDBWebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PLLDBWebSocketConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PLLDBWebSocketAPI}/*/$connect'

  PLLDBWebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PLLDBWebSocketDisconnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PLLDBWebSocketAPI}/*/$disconnect'

  PLLDBWebSocketAuthorizePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PLLDBWebSocketAuthorizeFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PLLDBWebSocketAPI}/*/authorize'

  PLLDBWebSocketDefaultPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PLLDBWebSocketDefaultFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PLLDBWebSocketAPI}/*/$default'

  PLLDBWebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - PLLDBWebSocketConnectRoute
      - PLLDBWebSocketDisconnectRoute
      - PLLDBWebSocketAuthorizeRoute
      - PLLDBWebSocketDefaultRoute
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI

  PLLDBWebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref PLLDBWebSocketAPI
      DeploymentId: !Ref PLLDBWebSocketDeployment
      StageName: prod

Parameters:
  S3Bucket:
    Type: String
    Description: S3 bucket containing the lambda function packages
  S3KeyPrefix:
    Type: String
    Description: S3 key prefix for lambda function packages

Outputs:
  WebSocketURL:
    Description: WebSocket API URL
    Value: !Sub 'wss://${PLLDBWebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/${PLLDBWebSocketStage}'